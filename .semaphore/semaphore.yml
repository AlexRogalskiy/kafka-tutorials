version: v1.0
name: Kafka Tutorials pipeline
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

promotions:
  - name: Deploy to live site
    pipeline_file: live-site-deploy.yml
    auto_promote_on:
      - result: passed
        branch:
          - ^release$

  - name: Deploy to staging site
    pipeline_file: staging-site-deploy.yml
    auto_promote_on:
      - result: passed
        branch:
          - ^master$

  - name: Stage PRs for review 
    pipeline_file: pr-staging-deploy.yml
    auto_promote:
      when: "branch != 'master' and branch != 'release' and branch !~ '^dependabot\.'"

blocks:
  - name: Build the website
    task:
      prologue:
        commands:
          - checkout
          - cache restore
          - npm install
          - gem install bundler
          - bundle install
          - cache store
      jobs:
        - name: Compile with Jekyll
          commands:
            - bundle exec jekyll build --baseurl "/$SEMAPHORE_GIT_BRANCH"
            - cache store site-$SEMAPHORE_GIT_SHA _site

  - name: "☕️ Build and Test Java (Kafka and Kafka Streams) Only"
    task:
      prologue:
        commands:
          - checkout
          - cache restore
      jobs:
        - name: Tests
          matrix:
            - env_var: JAVA_VERSION
              values: ["8", "11"]
          commands:
            - sem-version java $JAVA_VERSION
            - ./gradlew clean test

  - name: Run first block of tests
    execution_time_limit:
      minutes: 10
    task:
      prologue:
        commands:
          - checkout
          - make install-vault
          - . vault-bin/vault-setup
          - . vault-sem-get-secret aws_credentials
          - . vault-sem-get-secret dockerhub-semaphore-cred
          - >
            aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin "$(aws sts get-caller-identity | jq -r .Account).dkr.ecr.us-west-2.amazonaws.com"
          - docker login --username $DOCKERHUB_USER --password $DOCKERHUB_APIKEY
          - sudo pip3 install -e harness_runner/
          - >
            find _includes/tutorials/**/ksql -name docker-compose.yml | xargs -I {} sed -i -E "s/(\s+)(KSQL_CONFIG_DIR.*)/\1\2\\n\1KSQL_CONFLUENT_SUPPORT_METRICS_ENABLE: \"false\"/g" {}
      jobs:
        - name: KSQL transforming tests
          commands:
            - make -C _includes/tutorials/transforming/ksql/code tutorial

        - name: KStreams transforming tests
          commands:
            - make -C _includes/tutorials/transforming/kstreams/code tutorial

        - name: Kafka transforming tests
          commands:
            - make -C _includes/tutorials/transforming/kafka/code tutorial

        - name: KSQL filtering tests
          commands:
            - make -C _includes/tutorials/filtering/ksql/code tutorial

        - name: KStreams filtering tests
          commands:
            - make -C _includes/tutorials/filtering/kstreams/code tutorial

        - name: KSQL splitting tests
          commands:
            - make -C _includes/tutorials/splitting/ksql/code tutorial

        - name: KStreams splitting tests
          commands:
            - make -C _includes/tutorials/splitting/kstreams/code tutorial

        - name: KSQL merging tests
          commands:
            - make -C _includes/tutorials/merging/ksql/code tutorial

        - name: KStreams merging tests
          commands:
            - make -C _includes/tutorials/merging/kstreams/code tutorial

        - name: KSQL join stream to stream tests
          commands:
            - make -C _includes/tutorials/joining-stream-stream/ksql/code tutorial

        - name: KSQL join stream to table tests
          commands:
            - make -C _includes/tutorials/joining-stream-table/ksql/code tutorial

        - name: KStreams join stream to table tests
          commands:
            - make -C _includes/tutorials/joining-stream-table/kstreams/code tutorial

        - name: KStreams table to table foreign key join tests
          commands:
            - make -C _includes/tutorials/fk-joins/kstreams/code tutorial

        - name: KSQL join table to table tests
          commands:
            - make -C _includes/tutorials/joining-table-table/ksql/code tutorial

        - name: KStreams tumbling windows tests
          commands:
            - make -C _includes/tutorials/tumbling-windows/kstreams/code tutorial

        - name: KSQL tumbling windows tests
          commands:
            - make -C _includes/tutorials/tumbling-windows/ksql/code tutorial

        - name: KSQL session windows tests
          commands:
            - make -C _includes/tutorials/session-windows/ksql/code tutorial

        - name: KSQL aggregation count tests
          commands:
            - make -C _includes/tutorials/aggregating-count/ksql/code tutorial

        - name: KSQL aggregation MIN/MAX tests
          commands:
            - make -C _includes/tutorials/aggregating-minmax/ksql/code tutorial

        - name: KSQL aggregation sum tests
          commands:
            - make -C _includes/tutorials/aggregating-sum/ksql/code tutorial

        - name: KStreams aggregation sum tests
          commands:
            - make -C _includes/tutorials/aggregating-sum/kstreams/code tutorial

        - name: KSQL serialization tests
          commands:
            - make -C _includes/tutorials/serialization/ksql/code tutorial

        - name: KStreams Serialization tests
          commands:
            - sem-version java 11
            - make -C _includes/tutorials/serialization/kstreams/code tutorial

        - name: KSQL rekey stream tests
          commands:
            - make -C _includes/tutorials/rekeying/ksql/code tutorial

        - name: KSQL rekey stream with function tests
          commands:
            - make -C _includes/tutorials/rekeying-function/ksql/code tutorial

        - name: Kafka produce and consume in Scala
          commands:
            - make -C _includes/tutorials/produce-consume-lang/scala/code tutorial

        - name: KSQL anomaly detection tests
          commands:
            - make -C _includes/tutorials/anomaly-detection/ksql/code tutorial

 